"""This file contains code to extract pseudo boxes from pretrained detectors.
"""
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree

import argparse
import os
import os.path as osp
import time
import warnings

import mmcv
import torch
from mmcv import Config, DictAction
from mmcv.cnn import fuse_conv_bn
from mmcv.parallel import MMDataParallel, MMDistributedDataParallel
from mmcv.runner import (get_dist_info, init_dist, load_checkpoint,
                         wrap_fp16_model)

# from mmdet.apis import multi_gpu_test, single_gpu_test
from mmdet.datasets import (build_dataloader, build_dataset,
                            replace_ImageToTensor)
from mmdet.models import build_detector
from mmdet.utils import setup_multi_processes

import json
import numpy as np
from pycocotools import mask as maskUtils

# from mmcv.image.geometric import rescale_size
from mmdet.datasets.api_wrappers import COCO
from mmcv.image import tensor2imgs
from mmdet.core.visualization import imshow_det_bboxes
from tqdm import tqdm

voc_cat_ids = [1, 2, 3, 4, 5, 6, 7, 9, 16, 17, 18, 19, 20, 21, 44, 62, 63, 64, 67, 72]
nonvoc_cat_ids = [8, 10, 11, 13, 14, 15, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]
non_person_cat_ids = [2, 3, 4, 5, 6, 7, 9, 16, 17, 18, 19, 20, 21, 44, 62, 63, 64, 67, 72, 8, 10, 11, 13, 14, 15, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]
cat2catid = {'person': 1, 'bicycle': 2, 'car': 3, 'motorcycle': 4, 'airplane': 5, 'bus': 6, 'train': 7, 'truck': 8, 'boat': 9, 'traffic light': 10, 'fire hydrant': 11, 'stop sign': 13, 'parking meter': 14, 'bench': 15, 'bird': 16, 'cat': 17, 'dog': 18, 'horse': 19, 'sheep': 20, 'cow': 21, 'elephant': 22, 'bear': 23, 'zebra': 24, 'giraffe': 25, 'backpack': 27, 'umbrella': 28, 'handbag': 31, 'tie': 32, 'suitcase': 33, 'frisbee': 34, 'skis': 35, 'snowboard': 36, 'sports ball': 37, 'kite': 38, 'baseball bat': 39, 'baseball glove': 40, 'skateboard': 41, 'surfboard': 42, 'tennis racket': 43, 'bottle': 44, 'wine glass': 46, 'cup': 47, 'fork': 48, 'knife': 49, 'spoon': 50, 'bowl': 51, 'banana': 52, 'apple': 53, 'sandwich': 54, 'orange': 55, 'broccoli': 56, 'carrot': 57, 'hot dog': 58, 'pizza': 59, 'donut': 60, 'cake': 61, 'chair': 62, 'couch': 63, 'potted plant': 64, 'bed': 65, 'dining table': 67, 'toilet': 70, 'tv': 72, 'laptop': 73, 'mouse': 74, 'remote': 75, 'keyboard': 76, 'cell phone': 77, 'microwave': 78, 'oven': 79, 'toaster': 80, 'sink': 81, 'refrigerator': 82, 'book': 84, 'clock': 85, 'vase': 86, 'scissors': 87, 'teddy bear': 88, 'hair drier': 89, 'toothbrush': 90}

def xywh2xyxy(bbox):
    return [bbox[0], bbox[1], bbox[2]+bbox[0], bbox[3]+bbox[1]]

def xyxy2xywh(dets):
    return np.concatenate((dets[:, :2], dets[:, 2, None]-dets[:, 0, None], dets[:, 3, None]-dets[:, 1, None]), axis=1)
    
def proposals2json(bboxes, gt_ious, scores, img_id, orig_shape):
    areas = bboxes[:, 2] * bboxes[:, 3] 
    anns = []
    if len(img_id) > 60:
        img_num = int(img_id[56:-4])
    else:
        img_num = int(img_id[:-4])
    for i, box in enumerate(bboxes):
        ann = {
            # "segmentation": new_rle,
            "area": int(areas[i]),
            # "bbox": [int(coord) for coord in bboxes[i]], # why integer?
            "bbox": bboxes[i],
            "image_id": img_id,
            "category_id": 1,
            "rank": i,
            "gt_iou": gt_ious[i],
            "score": scores[i],
            "orig_shape": orig_shape,
            'id': i + img_num*100000
        }
        anns.append(ann)
    return anns


def replace_filename_by_id(results, dataset):
    coco = dataset.coco
    filename_id_map = {}
    for i in dataset.img_ids:
        info = coco.load_imgs([i])[0]
        filename_id_map[info["file_name"]] = i
    for img_result in results:
        for result in img_result:
            result["image_id"] = filename_id_map[result["image_id"]]
    return results





def single_gpu_test(
    model,
    data_loader,
    show=False,
    out_dir=None,
    topk=20,
    vis_k=3,
    # coco_all=False,
    filter_gt_overlap=False,
    gt_cat_class = 'voc',
    category=None
    # pa_func=generate_pa_proposals,
):
    """
    Function to extract masks generated by PA
        topk: extract topk masks per image at most
        pa_func: function to turn PA into masks
        use_gt_masks: whether the json comes with gt masks
            If so (e.g. COCO), we check the maximum IoU a pseudo mask has with
                GT; later we may filter out pseudo masks with high IoU
            If not (e.g. ImageNet), we skip the step above
    """
    model.eval()
    results = []
    dataset = data_loader.dataset
    coco = COCO('dataset/coco/annotations/instances_train2017.json')
    nonvoc_cat_ids = [8, 10, 11, 13, 14, 15, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90]

    PALETTE = dataset.PALETTE
    prog_bar = mmcv.ProgressBar(len(dataset))
    for k, data in tqdm(enumerate(data_loader)):
        img_metas = data['img_metas'][0].data[0][0]
        
        if len(img_metas['ori_filename']) > 60:
            ori_filename = img_metas['ori_filename'][56:]
        else:
            ori_filename = img_metas['ori_filename']

        imgid = int(ori_filename[:-4])
        gt_ann_ids = coco.get_ann_ids(imgid)
        gt_anns = []
        # gt_ann_cat_ids = []
        iscrowd = []
        gt_cats = []
        gt_vis_boxes = []
        fridge_cats = []
        if gt_cat_class == 'voc':
            skip_ann_ids = nonvoc_cat_ids
        elif gt_cat_class == 'cocoall':
            skip_ann_ids = []
        for ann_id in gt_ann_ids:
            ann = coco.load_anns(ann_id)[0]
            gt_cats.append(ann['category_id'])
            if ann['category_id'] in skip_ann_ids: # skip unknown classes
                continue
            gt_anns.append(ann['bbox'])
            gt_vis_boxes.append(xywh2xyxy(ann['bbox'])+[1.0])
            iscrowd.append(ann['iscrowd'])
            # gt_ann_cat_ids.append(ann['category_id'])
        if category is not None:
            if cat2catid[category] not in gt_cats:
                continue # We want to find images that contain a objects from the specified category

        with torch.no_grad():
            result = model(return_loss=False, rescale=True, **data) # shape?
        top20_dt = result[0][0][:topk, :4] # xyxy
        scores = result[0][0][:topk, -1]
        top20_dt = xyxy2xywh(top20_dt)

        ious = maskUtils.iou(top20_dt, gt_anns, iscrowd)
        if len(ious):
            gt_ious = ious.max(axis=1)
        else:
            gt_ious = np.zeros(len(top20_dt))

        
        # Visualization of top k detections:      
        if show or out_dir:

            vis_results = []
            top20_results = result[0][0][:topk]
            for i, _ in enumerate(top20_dt):
                if len(vis_results) == vis_k: # NOTE: here you can tune how many detections in each img to see
                    break
                if filter_gt_overlap:
                    if gt_ious[i] > 0.5:
                        continue
                    else:
                        vis_box = top20_results[i]
                        # vis_box[-1] = gt_ious[i]
                        vis_results.append(vis_box)
                else:
                    vis_box = top20_results[i]
                    # vis_box[-1] = gt_ious[i]
                    vis_results.append(vis_box)
            
            if len(vis_results) == 0:
                print(f"No detected box for image {ori_filename}")
                continue

            if isinstance(data['img'][0], torch.Tensor):
                img_tensor = data['img'][0]
            else:
                img_tensor = data['img'][0].data[0]
            imgs = tensor2imgs(img_tensor, **img_metas['img_norm_cfg'])
            # assert len(imgs) == len(img_metas)

            for i, (img, img_meta) in enumerate(zip(imgs, [img_metas])):
                h, w, _ = img_meta['img_shape']
                img_show = img[:h, :w, :]

                ori_h, ori_w = img_meta['ori_shape'][:-1]
                img_show = mmcv.imresize(img_show, (ori_w, ori_h))

                if out_dir:
                    out_file = osp.join(out_dir, ori_filename)
                else:
                    out_file = None
                
                img = mmcv.imread(img_show)
                img = img.copy()

                bboxes = np.vstack(vis_results)
                labels = [0 for i, bbox in enumerate(vis_results)]
                # bboxes = np.vstack(vis_results+gt_vis_boxes)
                # labels = [0 for i, bbox in enumerate(vis_results)] + [1 for i, bbox in enumerate(gt_vis_boxes)]
                # bboxes = np.vstack(gt_vis_boxes)
                # labels = [1 for i, bbox in enumerate(gt_vis_boxes)]
                labels = np.stack(labels)
                imshow_det_bboxes(
                    img,
                    bboxes,
                    labels,
                    segms=None,
                    # class_names=dataset.CLASSES,
                    class_names=["object"],
                    score_thr=0.0,
                    bbox_color=PALETTE,
                    text_color=PALETTE,
                    mask_color=PALETTE,
                    thickness=4,
                    font_size=10,
                    win_name='',
                    show=show,
                    wait_time=0.1,
                    out_file=out_file,
                    show_text=False)


        result = proposals2json(
                top20_dt, gt_ious, scores, img_metas['ori_filename'], img_metas["ori_shape"]
            )
        
        results.append(result)
        prog_bar.update()
    return results



def parse_args():
    parser = argparse.ArgumentParser(
        description='MMDet test (and eval) a model')
    parser.add_argument('config', help='test config file path')
    parser.add_argument('checkpoint', help='checkpoint file')
    parser.add_argument("--out", help="output result file in pickle format")
    parser.add_argument(
        '--work-dir',
        help='the directory to save the file containing evaluation metrics')
    parser.add_argument(
        '--fuse-conv-bn',
        action='store_true',
        help='Whether to fuse conv and bn, this will slightly increase'
        'the inference speed')
    parser.add_argument(
        '--gpu-ids',
        type=int,
        nargs='+',
        help='(Deprecated, please use --gpu-id) ids of gpus to use '
        '(only applicable to non-distributed training)')
    parser.add_argument(
        '--gpu-id',
        type=int,
        default=0,
        help='id of gpu to use '
        '(only applicable to non-distributed testing)')
    parser.add_argument(
        '--format-only',
        action='store_true',
        help='Format the output results without perform evaluation. It is'
        'useful when you want to format the result to a specific format and '
        'submit it to the test server')
    parser.add_argument(
        '--eval',
        type=str,
        nargs='+',
        help='evaluation metrics, which depends on the dataset, e.g., "bbox",'
        ' "segm", "proposal" for COCO, and "mAP", "recall" for PASCAL VOC')
    parser.add_argument('--show', action='store_true', help='show results')
    parser.add_argument(
        '--show-dir', help='directory where painted images will be saved')
    parser.add_argument(
        '--show-score-thr',
        type=float,
        default=0.3,
        help='score threshold (default: 0.3)')
    parser.add_argument(
        '--gpu-collect',
        action='store_true',
        help='whether to use gpu to collect results.')
    parser.add_argument(
        '--tmpdir',
        help='tmp directory used for collecting results from multiple '
        'workers, available when gpu-collect is not specified')
    parser.add_argument(
        '--cfg-options',
        nargs='+',
        action=DictAction,
        help='override some settings in the used config, the key-value pair '
        'in xxx=yyy format will be merged into config file. If the value to '
        'be overwritten is a list, it should be like key="[a,b]" or key=a,b '
        'It also allows nested list/tuple values, e.g. key="[(a,b),(c,d)]" '
        'Note that the quotation marks are necessary and that no white space '
        'is allowed.')
    parser.add_argument(
        '--options',
        nargs='+',
        action=DictAction,
        help='custom options for evaluation, the key-value pair in xxx=yyy '
        'format will be kwargs for dataset.evaluate() function (deprecate), '
        'change to --eval-options instead.')
    parser.add_argument(
        '--eval-options',
        nargs='+',
        action=DictAction,
        help='custom options for evaluation, the key-value pair in xxx=yyy '
        'format will be kwargs for dataset.evaluate() function')
    parser.add_argument(
        '--launcher',
        choices=['none', 'pytorch', 'slurm', 'mpi'],
        default='none',
        help='job launcher')
    parser.add_argument('--local_rank', type=int, default=0)
    parser.add_argument(
        '--topk',
        type=int,
        default=20,)
    parser.add_argument(
        '--visk',
        type=int,
        default=3,)
    parser.add_argument('--modality',  default='rgb', type=str, choices=['rgb', 'depth', 'normal'])
    parser.add_argument('--max_size', type=int, default=576)
    parser.add_argument("--filter_gt_overlap", action="store_true", help="For visualization, whether to filter detected boxes with high gt overlap")
    parser.add_argument("--category", default=None, type=str)
    parser.add_argument("--gt_cat_class", default='voc', type=str, choices=['voc', 'cocoall', 'person'])
    args = parser.parse_args()
    if 'LOCAL_RANK' not in os.environ:
        os.environ['LOCAL_RANK'] = str(args.local_rank)

    if args.options and args.eval_options:
        raise ValueError(
            '--options and --eval-options cannot be both '
            'specified, --options is deprecated in favor of --eval-options')
    if args.options:
        warnings.warn('--options is deprecated in favor of --eval-options')
        args.eval_options = args.options
    return args


def main():
    args = parse_args()

    assert args.out or args.eval or args.format_only or args.show \
        or args.show_dir, \
        ('Please specify at least one operation (save/eval/format/show the '
         'results / save the results) with the argument "--out", "--eval"'
         ', "--format-only", "--show" or "--show-dir"')

    if args.eval and args.format_only:
        raise ValueError('--eval and --format_only cannot be both specified')

    if args.out is not None and not args.out.endswith(('.pkl', '.pickle')):
        raise ValueError('The output file must be a pkl file.')

    cfg = Config.fromfile(args.config)
    if args.cfg_options is not None:
        cfg.merge_from_dict(args.cfg_options)
    
    print(args)
    print(cfg.model)

    # set multi-process settings
    setup_multi_processes(cfg)

    # set cudnn_benchmark
    if cfg.get('cudnn_benchmark', False):
        torch.backends.cudnn.benchmark = True

    cfg.model.pretrained = None
    if cfg.model.get('neck'):
        if isinstance(cfg.model.neck, list):
            for neck_cfg in cfg.model.neck:
                if neck_cfg.get('rfp_backbone'):
                    if neck_cfg.rfp_backbone.get('pretrained'):
                        neck_cfg.rfp_backbone.pretrained = None
        elif cfg.model.neck.get('rfp_backbone'):
            if cfg.model.neck.rfp_backbone.get('pretrained'):
                cfg.model.neck.rfp_backbone.pretrained = None

    # in case the test dataset is concatenated
    samples_per_gpu = 1
    if isinstance(cfg.data.test, dict):
        cfg.data.test.test_mode = True
        samples_per_gpu = cfg.data.test.pop('samples_per_gpu', 1)
        if samples_per_gpu > 1:
            # Replace 'ImageToTensor' to 'DefaultFormatBundle'
            cfg.data.test.pipeline = replace_ImageToTensor(
                cfg.data.test.pipeline)
    elif isinstance(cfg.data.test, list):
        for ds_cfg in cfg.data.test:
            ds_cfg.test_mode = True
        samples_per_gpu = max(
            [ds_cfg.pop('samples_per_gpu', 1) for ds_cfg in cfg.data.test])
        if samples_per_gpu > 1:
            for ds_cfg in cfg.data.test:
                ds_cfg.pipeline = replace_ImageToTensor(ds_cfg.pipeline)

    if args.gpu_ids is not None:
        cfg.gpu_ids = args.gpu_ids[0:1]
        warnings.warn('`--gpu-ids` is deprecated, please use `--gpu-id`. '
                      'Because we only support single GPU mode in '
                      'non-distributed testing. Use the first GPU '
                      'in `gpu_ids` now.')
    else:
        cfg.gpu_ids = [args.gpu_id]

    # init distributed env first, since logger depends on the dist info.
    if args.launcher == 'none':
        distributed = False
    else:
        distributed = True
        init_dist(args.launcher, **cfg.dist_params)


    cfg.data_root = 'dataset/coco/'
    cfg.data.train.ann_file = cfg.data_root + 'annotations/instances_train2017.json'
    if args.modality == 'rgb':
        cfg.data.train.img_prefix = cfg.data_root  + 'train2017/'
    elif args.modality in ["depth", "normal"]:
        cfg.data.train.img_prefix = cfg.data_root  + f'train_{args.modality}{args.max_size}_omni/'

    cfg.data.train.pipeline = cfg.data.test.pipeline
    dataset = build_dataset(cfg.data.train)
    data_loader = build_dataloader(
        dataset,
        samples_per_gpu=samples_per_gpu,
        workers_per_gpu=cfg.data.workers_per_gpu,
        dist=distributed,
        shuffle=False)        
        
    # build the model and load checkpoint
    cfg.model.train_cfg = None
    model = build_detector(cfg.model, test_cfg=cfg.get('test_cfg'))
    fp16_cfg = cfg.get('fp16', None)
    if fp16_cfg is not None:
        wrap_fp16_model(model)
    checkpoint = load_checkpoint(model, args.checkpoint, map_location='cpu')
    if args.fuse_conv_bn:
        model = fuse_conv_bn(model)
    # old versions did not save class info in checkpoints, this walkaround is
    # for backward compatibility
    if 'CLASSES' in checkpoint.get('meta', {}):
        model.CLASSES = checkpoint['meta']['CLASSES']
    else:
        model.CLASSES = dataset.CLASSES

    # Based on test config, make predictions. 
    model = MMDataParallel(model, device_ids=cfg.gpu_ids)
    outputs = single_gpu_test(model, data_loader, args.show, args.show_dir, args.topk, vis_k=args.visk, gt_cat_class=args.gt_cat_class, filter_gt_overlap=args.filter_gt_overlap, category=args.category)


    rank, _ = get_dist_info()
    if rank == 0:
        if args.out:
            out_dir = os.path.dirname(args.out)
            if not os.path.exists(out_dir):
                os.makedirs(out_dir)
            outputs = replace_filename_by_id(outputs, dataset)
            print(f"\nwriting results to {args.out}")
            mmcv.dump(outputs, args.out + '.pkl')

    # Generating a json annotation file for the new annotations
    coco_annotations = json.load(open('dataset/coco/annotations/instances_train2017.json')).copy()
    pseudo_annotations = np.load(args.out, allow_pickle=True) # 

    annotations = []

    for anns in tqdm(pseudo_annotations):
        for ann in anns:
            ann['bbox'] = ann['bbox'].tolist()  # to save as a json file, numpy array needs to be trasnformed to list
            ann['score'] = ann['score'].astype(np.float64)
            annotations.append(ann)

    coco_annotations['annotations'] = annotations

    json.dump(coco_annotations, open(args.out + '.json', "w"))


if __name__ == '__main__':
    main()
